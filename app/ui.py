import streamlit as st
import pandas as pd
import numpy as np
import joblib
from datetime import datetime

# –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ–ª—å (28 —à—Ç—É–∫)
MODEL_FEATURES = [
    'IsPaid', 'count_items', 'avg_unique_purchase', 'is_courier',
    'NmAge', 'Distance', 'DaysAfterRegistration', 'number_of_ordered_items',
    'year', 'month', 'weekday', 'weekend', 'service_nnsz',
    'PaymentType_ACC', 'PaymentType_BAL', 'PaymentType_CRE',
    'PaymentType_MPM', 'PaymentType_PDL', 'PaymentType_QRS',
    'far_and_large_order', 'order_vs_mean_order',
    'is_new_user', 'is_new_product', 'far_distance',
    'dist_<50', 'dist_50-200', 'dist_200-1000', 'dist_>1000'
]


def preprocess_input(df):
    df = df.copy()

    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
    if 'CreatedDate' in df.columns:
        dt = pd.to_datetime(df['CreatedDate'])
        df['year'] = dt.dt.year
        df['month'] = dt.dt.month
        df['weekday'] = dt.dt.weekday
        df['weekend'] = (dt.dt.weekday >= 5).astype(int)

    # 2. –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    if 'service' in df.columns:
        df['service_nnsz'] = (df['service'] == 'nnsz').astype(int)

    if 'PaymentType' in df.columns:
        for pt in ['ACC', 'BAL', 'CRE', 'MPM', 'PDL', 'QRS']:
            df[f'PaymentType_{pt}'] = (df['PaymentType'] == pt).astype(int)

    # 3. –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∏—á–∏
    processed_df = pd.DataFrame()

    for feature in MODEL_FEATURES:
        if feature in df.columns:
            processed_df[feature] = df[feature]
        else:
            processed_df[feature] = 0  # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ

    # 4. –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    bool_cols = ['IsPaid', 'is_courier', 'weekend', 'service_nnsz',
                 'is_new_user', 'is_new_product', 'far_distance']
    for col in bool_cols:
        if col in processed_df.columns:
            processed_df[col] = processed_df[col].astype(int)

    # 5. –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö NaN
    processed_df.fillna(0, inplace=True)

    return processed_df[MODEL_FEATURES]


@st.cache_resource
def load_model():
    artifact = joblib.load("app/model/best_model.pkl")
    model = artifact["model"]
    return model


model = load_model()

st.title("üö® Fraud Detection UI")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏, –∏ –º—ã –ø—Ä–µ–¥—Å–∫–∞–∂–µ–º —Ñ—Ä–æ–¥.")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])

if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file)
        df_processed = preprocess_input(df)

        # st.write("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df_processed.columns.tolist())
        # st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—á–µ–π:", len(df_processed.columns))

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        proba = model.predict_proba(df_processed)[:, 1]
        print(proba)
        thr = 0.49466894668438827
        if proba >= thr:
            df['confidence'] = 0.5 + 0.5 * ((proba - thr) / (1 - thr))
        else:
            df['confidence'] = 0.5 + 0.5 * ((thr - proba) / thr)
        df['prediction'] = (proba >= 0.49466894668438827).astype(int)

        st.success("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        st.dataframe(df[['prediction', 'confidence'] +
                        [c for c in df.columns if c not in ['prediction', 'confidence']]])

        csv = df.to_csv(index=False).encode()
        st.download_button("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç CSV", csv, "fraud_predictions.csv", "text/csv")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        if 'df_processed' in locals():
            st.write("–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", df_processed.head())
            st.write("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:", df_processed.dtypes)
